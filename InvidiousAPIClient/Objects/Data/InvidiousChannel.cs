using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace MarmadileManteater.InvidiousClient.Objects.Data
{
    public class InvidiousChannel
    {
        private readonly JObject _data;
        internal InvidiousChannel(JObject? instanceObject)
        {
            if (instanceObject == null)
            {
                instanceObject = new JObject();
            }
            _data = instanceObject;
        }
        /// <summary>
        /// Gets the inner JObject data from the video
        /// </summary>
        /// <returns></returns>
        public JObject GetData()
        {
            JObject? data = JsonConvert.DeserializeObject<JObject>(JsonConvert.SerializeObject(_data));
            if (data != null)
            {
                return data;
            }
            return new JObject();
        }
        public string Author
        {
            get
            {
                string? result = _data["author"]?.Value<string>();
                if (result != null)
                {
                    return result;
                }
                return "";
            }
        }
        public string AuthorId
        {
            get
            {
                string? result = _data["authorId"]?.Value<string>();
                if (result != null)
                {
                    return result;
                }
                return "";
            }
        }
        public string AuthorUrl
        {
            get
            {
                string? result = _data["authorUrl"]?.Value<string>();
                if (result != null)
                {
                    return result;
                }
                return "";
            }
        }
        public List<InvidiousImage> AuthorBanners
        {
            get
            {
                List<InvidiousImage> result = new();
                JArray? banners = _data["authorBanners"]?.Value<JArray>();
                if (banners != null)
                {
                    foreach (JObject banner in banners)
                    {
                        result.Add(new InvidiousImage(banner));
                    }
                }

                return result;
            }
        }
        public List<InvidiousImage> AuthorThumbnails
        {
            get
            {
                List<InvidiousImage> result = new();
                JArray? thumbnails = _data["authorThumbnails"]?.Value<JArray>();
                if (thumbnails != null)
                {
                    foreach (JObject thumbnail in thumbnails)
                    {
                        result.Add(new InvidiousImage(thumbnail));
                    }
                }

                return result;
            }
        }
        public long SubCount
        {
            get
            {
                long? result = _data["subCount"]?.Value<long>();
                if (result != null)
                {
                    return result.Value;
                }
                return 0;
            }
        }
        public long TotalViews
        {
            get
            {
                long? result = _data["totalViews"]?.Value<long>();
                if (result != null)
                {
                    return result.Value;
                }
                return 0;
            }
        }
        public DateTime Joined
        {
            get
            {
                long? result = _data["joined"]?.Value<long>();
                if (result != null)
                {
                    return new DateTime(result.Value);
                }
                return new DateTime(0);
            }
        }
        public bool IsAutoGenerated
        {
            get
            {
                return  _data["autogenerated"]?.Value<bool>() == true;
            }
        }
        public bool IsFamilyFriendly
        {
            get
            {
                return _data["isFamilyFriendly"]?.Value<bool>() == true;
            }
        }
        public string Description
        {
            get
            {
                string? result = _data["description"]?.Value<string>();
                if (result != null)
                {
                    return result;
                }
                return "";
            }
        }
        public string DescriptionHtml
        {
            get
            {
                string? result = _data["descriptionHtml"]?.Value<string>();
                if (result != null)
                {
                    return result;
                }
                return "";
            }
        }
        public List<string> AllowedRegions
        {
            get
            {
                List<string> result = new List<string>();
                JArray? keywords = _data["allowedRegions"]?.Value<JArray>();
                if (keywords != null)
                {
                    foreach (JToken keyword in keywords)
                    {
                        string? stringValue = keyword?.Value<string>();
                        if (stringValue != null)
                        {
                            result.Add(stringValue);
                        }
                    }
                }

                return result;
            }
        }
        public List<InvidiousChannelVideo> LatestVideos
        {
            get
            {
                List<InvidiousChannelVideo> result = new List<InvidiousChannelVideo>();
                JArray? videos = _data["latestVideos"]?.Value<JArray>();
                if (videos != null)
                {
                    foreach (JObject video in videos)
                    {
                        result.Add(new InvidiousChannelVideo(video));
                    }
                }

                return result;
            }
        }
    }
}
